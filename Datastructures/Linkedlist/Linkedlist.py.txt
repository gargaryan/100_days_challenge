class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
class LinkedList:
    def __init__(self):
        self.head=None
    def printtmp(self):
        current=self.head
        while  current is not None:
            print(str(current.data)  + "------->",end="")
            current=current.next
    def insertAtBeg(self,data):
        current=Node(data)
        if(self.head is None):
            self.head=current
        else:
            current.next=self.head
            self.head=current
    def insertAtLast(self,data):
        current=Node(data)
        if(self.head is None):
            self.head=current
            return
        last=self.head
        while(last.next):
            last=last.next
        last.next=current
    #insert Node after particular position
    def insertAfterNode(self,Position,data):
        newnode=Node(data)
        if(self.head is None):
            self.head=newnode
        #Lets asssume position given is valid
        current=self.head
        for i in range(0,Position-2):
            current=current.next
        temp=current.next
        current.next=newnode
        newnode.next=temp
    #delete at given pistion
    def deleteAtkey(self,Position):
        current=self.head
        for i in range(0,Position-2):
            current=current.next
        current.next=current.next.next
    #length by recursive Approach
    def getlengthrec(self,node):
        if(node is None):
            return 0
        return 1+self.getlengthrec(node.next)
    def count(self):
        return self.getlengthrec(self.head)
        
    
        
            
            
        
        
            
            
            
        
ll=LinkedList()
ll.head=Node(1)
second=Node(2)
third=Node(3)
ll.head.next=second
second.next=third
ll.insertAtBeg(0)
ll.insertAtLast(4)
ll.insertAfterNode(3,11)
ll.deleteAtkey(1)
ll.printtmp()

print("null")
print(ll.count())



    
    